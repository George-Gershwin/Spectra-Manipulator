{
    "remove_empty_entries": false,
    "skip_columns_num": 0,
    "csv_imp_delimiter": ",",
    "csv_imp_decimal_sep": ".",
    "general_imp_delimiter": "\t",
    "general_imp_decimal_sep": ",",
    "dx_imp_delimiter": " ",
    "dx_imp_decimal_sep": ".",
    "dx_import_spectra_name_from_filename": false,
    "dx_if_title_is_empty_use_filename": true,
    "general_import_spectra_name_from_filename": true,
    "general_if_header_is_empty_use_filename": true,
    "clip_imp_delimiter": "\t",
    "clip_imp_decimal_sep": ".",
    "excel_imp_as_text": false,
    "files_exp_include_group_name": false,
    "files_exp_include_header": true,
    "clip_exp_include_group_name": false,
    "clip_exp_include_header": true,
    "clip_exp_delimiter": "\t",
    "clip_exp_decimal_sep": ".",
    "graph_title": "",
    "antialiasing": true,
    "left_axis_label": "PSS composition",
    "left_axis_unit": null,
    "bottom_axis_label": "Wavelength (nm)",
    "bottom_axis_unit": null,
    "show_grid": false,
    "grid_alpha": 0.1,
    "line_width": 4.0,
    "graph_title_font_size": 20,
    "bottom_axis_font_size": 20,
    "left_axis_font_size": 20,
    "same_color_in_group": false,
    "different_line_style_among_groups": false,
    "legend_spacing": 10,
    "color_scheme": 0,
    "hues": 189,
    "values": 1,
    "maxValue": 255,
    "minValue": 150,
    "maxHue": 280,
    "minHue": 0,
    "sat": 255,
    "alpha": 255,
    "user_defined_grad": "0.0\t1\t0\t0\t1\n0.1\t1\t1\t0\t1\n1\t0\t1\t0\t1\n",
    "HSV_reversed": false,
    "reverse_z_order": true,
    "FP_num_of_points": 500,
    "last_rename_expression": "{:} us",
    "last_rename_take_name_from_list": false,
    "import_files_dialog_path": "",
    "open_project_dialog_path": "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2018-19_Japan-C-C bond homolysis/LFP/2019-01-10 CP-DiMe+BP 2eq 293K",
    "save_project_dialog_path": "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2019-Bilirubin project/UV-VIS",
    "export_spectra_as_dialog_path": "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2019-Bilirubin project/UV-VIS",
    "export_spectra_as_dialog_ext": ".txt",
    "export_spectra_as_dialog_delimiter": "\t",
    "export_spectra_as_dialog_decimal_sep": ".",
    "recent_project_filepaths": [
        "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2019-Bilirubin project/UV-VIS/HPLC eps.smpj",
        "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2018-19_Japan-C-C bond homolysis/UV-VIS spectra/AZ+CP epsilons.smpj",
        "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2019-Bilirubin project/UV-VIS/LED sources.smpj",
        "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2019-Bilirubin project/UV-VIS/Irradiation kinetics/for MCR/Kinetics Z/355 nm MeOH aerated 2 LED modules/data.smpj",
        "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2019-Bilirubin project/UV-VIS/Irradiation kinetics/for MCR/Kinetics Z/375 nm MeOH aerated 2 LED modules/data.smpj",
        "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2019-Bilirubin project/UV-VIS/Irradiation kinetics/for MCR/Kinetics Z/450 nm MeOH aerated/data.smpj",
        "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2019-Bilirubin project/UV-VIS/Irradiation kinetics/for MCR/Kinetics Z/490 nm MeOH aerated/data.smpj",
        "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2019-Bilirubin project/UV-VIS/Irradiation kinetics/for MCR/Kinetics Z/400 nm MeOH aerated/data.smpj",
        "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2019-Bilirubin project/UV-VIS/Irradiation kinetics/for MCR/Kinetics Z/375 nm MeOH aerated/data.smpj",
        "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2019-Bilirubin project/UV-VIS/Irradiation kinetics/Z kin in MeOH, 405 LED irr,m degassed/data.smpj",
        "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2019-Bilirubin project/UV-VIS/Irradiation kinetics/Z kin in DCM, 405 LED irr,m under air/data.smpj",
        "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2018-19_Japan-C-C bond homolysis/LFP/2019-01-10 CP-DiMe+BP 2eq 293K/data.smpj",
        "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2019-Bilirubin project/Python/QY calc/epsilons.smpj",
        "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2019-Bilirubin project/Emission spectroscopy/Z isomer in MeOH/Z em ex.smpj",
        "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2019-Bilirubin project/UV-VIS/QY measurement/HPLC-measured comparison.smpj",
        "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2019-Bilirubin project/UV-VIS/QY measurement/Z start/365 nm LED irr, pinhole/data.smpj",
        "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2019-Bilirubin project/UV-VIS/QY measurement/Z start/365 nm LED irr, pinhole 2/data.smpj",
        "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2019-Bilirubin project/UV-VIS/QY measurement/Z start/epsilons EZ.smpj",
        "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2019-Bilirubin project/UV-VIS/QY measurement/Z start/365 nm LED irr, pinhole 3/data.smpj",
        "C:/Users/Dominik/Documents/MUNI/Organic Photochemistry/Projects/2019-Bilirubin project/UV-VIS/QY measurement/Z start/pinhole photonflux, Fox/data.smpj"
    ],
    "gui_settings_last_tab_index": 2,
    "HSV_color_scheme": true,
    "default_project_filename": "Untilted",
    "csv_exp_delimiter": ",",
    "csv_exp_decimal_sep": ".",
    "general_exp_delimiter": "\t",
    "general_exp_decimal_sep": ".",
    "baseline_correct_range": [
        300.0,
        800.0
    ],
    "normalize_range": [
        400.0,
        600.0
    ],
    "cut_range": [
        300.0,
        800.0
    ],
    "integrate_range": [
        300.0,
        800.0
    ],
    "fitting_models": [
        {
            "name": "A->B (lifetime)",
            "equation": "return A * exp(-x / tau) + y0",
            "params": [
                "A",
                "tau",
                "y0"
            ],
            "lower_bounds": [
                -Infinity,
                0,
                -Infinity
            ],
            "upper_bounds": [
                Infinity,
                Infinity,
                Infinity
            ],
            "init_func": "lambda x_data, y_data: (y_data[0], 1, 0)"
        },
        {
            "name": "A->B (rate constant)",
            "equation": "return A * exp(-k * x) + y0",
            "params": [
                "A",
                "k",
                "y0"
            ],
            "lower_bounds": [
                -Infinity,
                0,
                -Infinity
            ],
            "upper_bounds": [
                Infinity,
                Infinity,
                Infinity
            ],
            "init_func": "lambda x_data, y_data: (y_data[0], 1, 0)"
        },
        {
            "name": "A->B->C (B visible)",
            "equation": "# if k1~k2, we have to change the equation in order not to get zero division error\nif abs(k1 - k2) < 1e-8:\n    return A * k1 * x * exp(-k1 * x) + y0\nelse:\n    return A * (k1 / (k2 - k1)) * (exp(-k1 * x) - exp(-k2 * x)) + y0",
            "params": [
                "A",
                "k1",
                "k2",
                "y0"
            ],
            "lower_bounds": [
                -Infinity,
                0,
                0,
                -Infinity
            ],
            "upper_bounds": [
                Infinity,
                Infinity,
                Infinity,
                Infinity
            ],
            "init_func": "lambda x_data, y_data: (max(np.abs(y_data)), 1, 0.5, 0)"
        },
        {
            "name": "A->B->C (A + B visible)",
            "equation": "# if k1~k2, we have to change the equation in order not to get zero division error\nif abs(k1 - k2) < 1e-8:\n    return A1 * exp(-k1 * x) + A2 * k1 * x * exp(-k1 * x) + y0\nelse:\n    return A1 * exp(-k1 * x) + A2 * (k1 / (k2 - k1)) * (exp(-k1 * x) - exp(-k2 * x)) + y0",
            "params": [
                "A1",
                "A2",
                "k1",
                "k2",
                "y0"
            ],
            "lower_bounds": [
                -Infinity,
                -Infinity,
                0,
                0,
                -Infinity
            ],
            "upper_bounds": [
                Infinity,
                Infinity,
                Infinity,
                Infinity,
                Infinity
            ],
            "init_func": "lambda x_data, y_data: (0, max(np.abs(y_data)), 1, 0.5, 0)"
        },
        {
            "name": "A->B->C->D (C visible)",
            "equation": "# if k1~k2~k3 and their combinations, we have to change the equation in order not to get zero division error\n_ = 1e-8\nif abs(k1 - k2) < _ and abs(k1 - k3) < _ and abs(k2 - k3) < _:\n    #print(\"k1=k2=k3\")\n    return A * k1 * k1 * x * x * exp(-k1 * x) / 2 + y0\nif abs(k1 - k2) < _:\n    #print(\"k1=k2\")\n    return A * k1 * k1 * exp(-x * (k3 + k1)) * (exp(k3 * x) * (k3 * x - k1 * x - 1) + exp(k1 * x)) / (k3 - k1) ** 2 + y0\nif abs(k1 - k3) < _:\n    #print(\"k1=k3\")\n    return A * k2 * k1 * exp(-x * (k2 + k1)) * (exp(k2 * x) * (k2 * x - k1 * x - 1) + exp(k1 * x)) / (k2 - k1) ** 2 + y0\nif abs(k2 - k3) < _:\n    #print(\"k2=k3\")\n    return A * k1 * k2 * exp(-x * (k1 + k2)) * (exp(k1 * x) * (k1 * x - k2 * x - 1) + exp(k2 * x)) / (k1 - k2) ** 2 + y0\n#print(\"different\")\nreturn A * k1 * k2 * exp(-x * (k1 + k2 + k3)) * ((k1 - k2) * exp(x * (k1 + k2)) + (k3 - k1) * exp(x * (k1 + k3)) + (k2 - k3) * exp(x * (k2 + k3))) / ((k1 - k2) * (k1 - k3) * (k2 - k3)) + y0",
            "params": [
                "A",
                "k1",
                "k2",
                "k3",
                "y0"
            ],
            "lower_bounds": [
                -Infinity,
                0,
                0,
                0,
                -Infinity
            ],
            "upper_bounds": [
                Infinity,
                Infinity,
                Infinity,
                Infinity,
                Infinity
            ],
            "init_func": "lambda x_data, y_data: (max(np.abs(y_data)), 1, 0.5, 0.2, 0)"
        },
        {
            "name": "A->B->C->D (A + C visible)",
            "equation": "# if k1~k2~k3 and their combinations, we have to change the equation in order not to get zero division error\n_ = 1e-8\nif abs(k1 - k2) < _ and abs(k1 - k3) < _ and abs(k2 - k3) < _:\n    #print(\"k1=k2=k3\")\n    return A1 * exp(-k1 * x) + A2 * k1 * k1 * x * x * exp(-k1 * x) / 2 + y0\nif abs(k1 - k2) < _:\n    #print(\"k1=k2\")\n    return A1 * exp(-k1 * x) + A2 * k1 * k1 * exp(-x * (k3 + k1)) * (exp(k3 * x) * (k3 * x - k1 * x - 1) + exp(k1 * x)) / (k3 - k1) ** 2 + y0\nif abs(k1 - k3) < _:\n    #print(\"k1=k3\")\n    return A1 * exp(-k1 * x) + A2 * k2 * k1 * exp(-x * (k2 + k1)) * (exp(k2 * x) * (k2 * x - k1 * x - 1) + exp(k1 * x)) / (k2 - k1) ** 2 + y0\nif abs(k2 - k3) < _:\n    #print(\"k2=k3\")\n    return A1 * exp(-k1 * x) + A2 * k1 * k2 * exp(-x * (k1 + k2)) * (exp(k1 * x) * (k1 * x - k2 * x - 1) + exp(k2 * x)) / (k1 - k2) ** 2 + y0\n#print(\"different\")\nreturn A1 * exp(-k1 * x) + A2 * k1 * k2 * exp(-x * (k1 + k2 + k3)) * ((k1 - k2) * exp(x * (k1 + k2)) + (k3 - k1) * exp(x * (k1 + k3)) + (k2 - k3) * exp(x * (k2 + k3))) / ((k1 - k2) * (k1 - k3) * (k2 - k3)) + y0",
            "params": [
                "A1",
                "A2",
                "k1",
                "k2",
                "k3",
                "y0"
            ],
            "lower_bounds": [
                -Infinity,
                -Infinity,
                0,
                0,
                0,
                -Infinity
            ],
            "upper_bounds": [
                Infinity,
                Infinity,
                Infinity,
                Infinity,
                Infinity,
                Infinity
            ],
            "init_func": "lambda x_data, y_data: (max(np.abs(y_data)), max(np.abs(y_data)), 1, 0.5, 0.2, 0)"
        },
        {
            "name": "A->B->C->D (B + C visible)",
            "equation": "# if k1~k2~k3 and their combinations, we have to change the equation in order not to get zero division error\n_ = 1e-8\nif abs(k1 - k2) < _ and abs(k1 - k3) < _ and abs(k2 - k3) < _:\n    #print(\"k1=k2=k3\")\n    return A1 * k1 * x * exp(-k1 * x) + A2 * k1 * k1 * x * x * exp(-k1 * x) / 2 + y0\nif abs(k1 - k2) < _:\n    #print(\"k1=k2\"\n    return A1 * k1 * x * exp(-k1 * x) + A2 * k1 * k1 * exp(-x * (k3 + k1)) * (exp(k3 * x) * (k3 * x - k1 * x - 1) + exp(k1 * x)) / (k3 - k1) ** 2 + y0\nif abs(k1 - k3) < _:\n    #print(\"k1=k3\")\n    return A1 * (k1 / (k2 - k1)) * (exp(-k1 * x) - exp(-k2 * x)) + A2 * k2 * k1 * exp(-x * (k2 + k1)) * (exp(k2 * x) * (k2 * x - k1 * x - 1) + exp(k1 * x)) / (k2 - k1) ** 2 + y0\nif abs(k2 - k3) < _:\n    #print(\"k2=k3\")\n    return A1 * (k1 / (k2 - k1)) * (exp(-k1 * x) - exp(-k2 * x)) + A2 * k1 * k2 * exp(-x * (k1 + k2)) * (exp(k1 * x) * (k1 * x - k2 * x - 1) + exp(k2 * x)) / (k1 - k2) ** 2 + y0\n#print(\"different\")\nreturn A1 * (k1 / (k2 - k1)) * (exp(-k1 * x) - exp(-k2 * x)) + A2 * k1 * k2 * exp(-x * (k1 + k2 + k3)) * ((k1 - k2) * exp(x * (k1 + k2)) + (k3 - k1) * exp(x * (k1 + k3)) + (k2 - k3) * exp(x * (k2 + k3))) / ((k1 - k2) * (k1 - k3) * (k2 - k3)) + y0",
            "params": [
                "A1",
                "A2",
                "k1",
                "k2",
                "k3",
                "y0"
            ],
            "lower_bounds": [
                -Infinity,
                -Infinity,
                0,
                0,
                0,
                -Infinity
            ],
            "upper_bounds": [
                Infinity,
                Infinity,
                Infinity,
                Infinity,
                Infinity,
                Infinity
            ],
            "init_func": "lambda x_data, y_data: (max(np.abs(y_data)), max(np.abs(y_data)), 1, 0.5, 0.2, 0)"
        },
        {
            "name": "A->B->C->D (A + B + C visible)",
            "equation": "# if k1~k2~k3 and their combinations, we have to change the equation in order not to get zero division error\n_ = 1e-8\nif abs(k1 - k2) < _ and abs(k1 - k3) < _ and abs(k2 - k3) < _:\n    #print(\"k1=k2=k3\")\n    return A1 * exp(-k1 * x) + A2 * k1 * x * exp(-k1 * x) + A3 * k1 * k1 * x * x * exp(-k1 * x) / 2 + y0\nif abs(k1 - k2) < _:\n    #print(\"k1=k2\")\n    return A1 * exp(-k1 * x) + A2 * k1 * x * exp(-k1 * x) + A3 * k1 * k1 * exp(-x * (k3 + k1)) * (exp(k3 * x) * (k3 * x - k1 * x - 1) + exp(k1 * x)) / (k3 - k1) ** 2 + y0\nif abs(k1 - k3) < _:\n    #print(\"k1=k3\")\n    return A1 * exp(-k1 * x) + A2 * (k1 / (k2 - k1)) * (exp(-k1 * x) - exp(-k2 * x)) + A3 * k2 * k1 * exp(-x * (k2 + k1)) * (exp(k2 * x) * (k2 * x - k1 * x - 1) + exp(k1 * x)) / (k2 - k1) ** 2 + y0\nif abs(k2 - k3) < _:\n    #print(\"k2=k3\")\n    return A1 * exp(-k1 * x) + A2 * (k1 / (k2 - k1)) * (exp(-k1 * x) - exp(-k2 * x)) + A3 * k1 * k2 * exp(-x * (k1 + k2)) * (exp(k1 * x) * (k1 * x - k2 * x - 1) + exp(k2 * x)) / (k1 - k2) ** 2 + y0\n#print(\"different\")\nreturn A1 * exp(-k1 * x) + A2 * (k1 / (k2 - k1)) * (exp(-k1 * x) - exp(-k2 * x)) + A3 * k1 * k2 * exp(-x * (k1 + k2 + k3)) * ((k1 - k2) * exp(x * (k1 + k2)) + (k3 - k1) * exp(x * (k1 + k3)) + (k2 - k3) * exp(x * (k2 + k3))) / ((k1 - k2) * (k1 - k3) * (k2 - k3)) + y0",
            "params": [
                "A1",
                "A2",
                "A3",
                "k1",
                "k2",
                "k3",
                "y0"
            ],
            "lower_bounds": [
                -Infinity,
                -Infinity,
                -Infinity,
                0,
                0,
                0,
                -Infinity
            ],
            "upper_bounds": [
                Infinity,
                Infinity,
                Infinity,
                Infinity,
                Infinity,
                Infinity,
                Infinity
            ],
            "init_func": "lambda x_data, y_data: (max(np.abs(y_data)), max(np.abs(y_data)), max(np.abs(y_data)), 1, 0.5, 0.2, 0)"
        },
        {
            "name": "A->B 2nd order",
            "equation": "return A / (1 + A * k1 * x) + y0",
            "params": [
                "A",
                "k1",
                "y0"
            ],
            "lower_bounds": [
                -Infinity,
                0,
                -Infinity
            ],
            "upper_bounds": [
                Infinity,
                Infinity,
                Infinity
            ],
            "init_func": "lambda x_data, y_data: (y_data[0], 1, 0)"
        },
        {
            "name": "A->B 2nd order (with c0)",
            "equation": "return A * c0 / (1 + c0 * k1 * x) + y0",
            "params": [
                "A",
                "c0",
                "k1",
                "y0"
            ],
            "lower_bounds": [
                -Infinity,
                0,
                0,
                -Infinity
            ],
            "upper_bounds": [
                Infinity,
                Infinity,
                Infinity,
                Infinity
            ],
            "init_func": "lambda x_data, y_data: (y_data[0], 1, 1, 0)"
        },
        {
            "name": "A->B, A->B 2nd order",
            "equation": "return A * k1 / ( (A*k2+k1) * exp(k1 * x) - A*k2) + y0",
            "params": [
                "A",
                "k1",
                "k2",
                "y0"
            ],
            "lower_bounds": [
                -Infinity,
                0,
                0,
                -Infinity
            ],
            "upper_bounds": [
                Infinity,
                Infinity,
                Infinity,
                Infinity
            ],
            "init_func": "lambda x_data, y_data: (y_data[0], 1, 1, 0)"
        },
        {
            "name": "A->B, A->B 2nd order (with c0)",
            "equation": "return A * c0*k1 / ((c0*k2+k1) * exp(k1 * x) - c0*k2) + y0",
            "params": [
                "A",
                "c0",
                "k1",
                "k2",
                "y0"
            ],
            "lower_bounds": [
                -Infinity,
                0,
                0,
                0,
                -Infinity
            ],
            "upper_bounds": [
                Infinity,
                Infinity,
                Infinity,
                Infinity,
                Infinity
            ],
            "init_func": "lambda x_data, y_data: (y_data[0], 1, 1, 1, 0)"
        },
        {
            "name": "A->B, C->D (lifetime)",
            "equation": "return A1 * exp(-x / tau1) + A2 * exp(-x / tau2) + y0",
            "params": [
                "A1",
                "A2",
                "tau1",
                "tau2",
                "y0"
            ],
            "lower_bounds": [
                -Infinity,
                -Infinity,
                0,
                0,
                -Infinity
            ],
            "upper_bounds": [
                Infinity,
                Infinity,
                Infinity,
                Infinity,
                Infinity
            ],
            "init_func": "lambda x_data, y_data: (y_data[0], y_data[0], 1, 1, 0)"
        },
        {
            "name": "A->B, C->D (rate constant)",
            "equation": "return A1 * exp(-k1 * x) + A2 * exp(-k2 * x) + y0",
            "params": [
                "A1",
                "A2",
                "k1",
                "k2",
                "y0"
            ],
            "lower_bounds": [
                -Infinity,
                -Infinity,
                0,
                0,
                -Infinity
            ],
            "upper_bounds": [
                Infinity,
                Infinity,
                Infinity,
                Infinity,
                Infinity
            ],
            "init_func": "lambda x_data, y_data: (y_data[0], y_data[0], 1, 1, 0)"
        },
        {
            "name": "Linear",
            "equation": "return a * x + y0",
            "params": [
                "a",
                "y0"
            ],
            "lower_bounds": [
                -Infinity,
                -Infinity
            ],
            "upper_bounds": [
                Infinity,
                Infinity
            ],
            "init_func": "lambda x_data, y_data: ((y_data[-1] - y_data[0])/(x_data[-1] - x_data[0]), y_data[0])"
        }
    ]
}